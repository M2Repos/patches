From 63207b0fd932ac361dfd3c1b30f33f337833106c Mon Sep 17 00:00:00 2001
From: Dinolek <18579460+Dinolek@users.noreply.github.com>
Date: Mon, 16 Sep 2019 19:48:44 +0200
Subject: [PATCH] adopt lights for mblu2

---
 lights.c | 380 +++++++++----------------------------------------------
 1 file changed, 61 insertions(+), 319 deletions(-)

diff --git a/lights.c b/lights.c
index e4203ec..e3c25cb 100644
--- a/lights.c
+++ b/lights.c
@@ -70,74 +70,31 @@
 
 #include <hardware/lights.h>
 
-#define LIGHTS_DBG_ON
+//#define LIGHTS_DBG_ON
 /******************************************************************************/
 
 static pthread_once_t g_init = PTHREAD_ONCE_INIT;
 static pthread_mutex_t g_lock = PTHREAD_MUTEX_INITIALIZER;
-static int g_haveTrackballLight = 0;
 static struct light_state_t g_notification;
-static struct light_state_t g_battery;
 static int g_backlight = 255;
-static int g_trackball = -1;
-static int g_buttons = 0;
-static int g_attention = 0;
-
-/* TRACKBALL BACKLIGHT */
-char const*const TRACKBALL_FILE
-        = "/sys/class/leds/jogball-backlight/brightness";
 
 /* RED LED */
-char const*const RED_LED_FILE
+char const*const LED_FILE
         = "/sys/class/leds/red/brightness";
 
-char const*const RED_TRIGGER_FILE
+char const*const TRIGGER_FILE
         = "/sys/class/leds/red/trigger";
 
-char const*const RED_DELAY_ON_FILE
+char const*const DELAY_ON_FILE
         = "/sys/class/leds/red/delay_on";
 
-char const*const RED_DELAY_OFF_FILE
+char const*const DELAY_OFF_FILE
         = "/sys/class/leds/red/delay_off";
 
-/* GREEN LED */
-char const*const GREEN_LED_FILE
-        = "/sys/class/leds/green/brightness";
-
-char const*const GREEN_TRIGGER_FILE
-        = "/sys/class/leds/green/trigger";
-
-char const*const GREEN_DELAY_ON_FILE
-        = "/sys/class/leds/green/delay_on";
-
-char const*const GREEN_DELAY_OFF_FILE
-        = "/sys/class/leds/green/delay_off";
-
-/* BLUE LED */
-char const*const BLUE_LED_FILE
-        = "/sys/class/leds/blue/brightness";
-
-char const*const BLUE_TRIGGER_FILE
-        = "/sys/class/leds/blue/trigger";
-
-char const*const BLUE_DELAY_ON_FILE
-        = "/sys/class/leds/blue/delay_on";
-
-char const*const BLUE_DELAY_OFF_FILE
-        = "/sys/class/leds/blue/delay_off";
-
 /* LCD BACKLIGHT */
 char const*const LCD_FILE
         = "/sys/class/leds/lcd-backlight/brightness";
 
-/* KEYBOARD BACKLIGHT */
-char const*const KEYBOARD_FILE
-        = "/sys/class/leds/keyboard-backlight/brightness";
-
-/* BUTTON BACKLIGHT */
-char const*const BUTTON_FILE
-        = "/sys/class/leds/button-backlight/brightness";
-
 //ALPS0804285 add for delay
 int led_wait_delay(unsigned int ms)
 {
@@ -159,10 +116,6 @@ void init_globals(void)
 {
     // init the mutex
     pthread_mutex_init(&g_lock, NULL);
-
-    // figure out if we have the trackball LED or not
-    g_haveTrackballLight = (access(TRACKBALL_FILE, W_OK) == 0) ? 1 : 0;
-
 }
 
 static int
@@ -209,13 +162,7 @@ write_str(char const* path, char *str)
 }
 
 static int
-is_lit(struct light_state_t const* state)
-{
-    return state->color & 0x00ffffff;
-}
-
-static int
-blink_red(int level, int onMS, int offMS)
+blink(int level, int onMS, int offMS)
 {
 	static int preStatus = 0; // 0: off, 1: blink, 2: no blink
 	int nowStatus;
@@ -232,25 +179,24 @@ blink_red(int level, int onMS, int offMS)
 		return -1;
 
 #ifdef LIGHTS_DBG_ON
-	ALOGD("blink_red, level=%d, onMS=%d, offMS=%d\n", level, onMS, offMS);
+	ALOGD("blink, level=%d, onMS=%d, offMS=%d\n", level, onMS, offMS);
 #endif
 	if (nowStatus == 0) {
-        	write_int(RED_LED_FILE, 0);
+        	write_int(LED_FILE, 0);
 	}
 	else if (nowStatus == 1) {
-//        	write_int(RED_LED_FILE, level); // default full brightness
-		write_str(RED_TRIGGER_FILE, "timer");
-		while (((access(RED_DELAY_OFF_FILE, F_OK) == -1) || (access(RED_DELAY_OFF_FILE, R_OK|W_OK) == -1)) && i<10) {
-			ALOGD("RED_DELAY_OFF_FILE doesn't exist or cannot write!!\n");
-			led_wait_delay(5);//sleep 5ms for wait kernel LED class create led delay_off/delay_on node of fs
+		write_str(TRIGGER_FILE, "timer");
+		while (((access(DELAY_OFF_FILE, F_OK) == -1) || (access(DELAY_OFF_FILE, R_OK|W_OK) == -1)) && i<10) {
+			ALOGD("DELAY_OFF_FILE doesn't exist or cannot write!!\n");
+			led_wait_delay(5);
 			i++;
 		}
-		write_int(RED_DELAY_OFF_FILE, offMS);
-		write_int(RED_DELAY_ON_FILE, onMS);
+		write_int(DELAY_OFF_FILE, offMS);
+		write_int(DELAY_ON_FILE, onMS);
 	}
 	else {
-		write_str(RED_TRIGGER_FILE, "none");
-        	write_int(RED_LED_FILE, 255); // default full brightness
+		write_str(TRIGGER_FILE, "none");
+        	write_int(LED_FILE, 255);
 	}
 
 	preStatus = nowStatus;
@@ -258,114 +204,6 @@ blink_red(int level, int onMS, int offMS)
 	return 0;
 }
 
-static int
-blink_green(int level, int onMS, int offMS)
-{
-	static int preStatus = 0; // 0: off, 1: blink, 2: no blink
-	int nowStatus;
-	int i = 0;
-
-	if (level == 0)
-		nowStatus = 0;
-	else if (onMS && offMS)
-		nowStatus = 1;
-	else
-		nowStatus = 2;
-
-	if (preStatus == nowStatus)
-		return -1;
-
-#ifdef LIGHTS_DBG_ON
-	ALOGD("blink_green, level=%d, onMS=%d, offMS=%d\n", level, onMS, offMS);
-#endif
-	if (nowStatus == 0) {
-        	write_int(GREEN_LED_FILE, 0);
-	}
-	else if (nowStatus == 1) {
-//        	write_int(GREEN_LED_FILE, level); // default full brightness
-		write_str(GREEN_TRIGGER_FILE, "timer");
-		while (((access(GREEN_DELAY_OFF_FILE, F_OK) == -1) || (access(GREEN_DELAY_OFF_FILE, R_OK|W_OK) == -1)) && i<10) {
-			ALOGD("GREEN_DELAY_OFF_FILE doesn't exist or cannot write!!\n");
-			led_wait_delay(5);//sleep 5ms for wait kernel LED class create led delay_off/delay_on node of fs
-			i++;
-		}
-		write_int(GREEN_DELAY_OFF_FILE, offMS);
-		write_int(GREEN_DELAY_ON_FILE, onMS);
-	}
-	else {
-		write_str(GREEN_TRIGGER_FILE, "none");
-        	write_int(GREEN_LED_FILE, 255); // default full brightness
-	}
-
-	preStatus = nowStatus;
-
-	return 0;
-}
-
-static int
-blink_blue(int level, int onMS, int offMS)
-{
-	static int preStatus = 0; // 0: off, 1: blink, 2: no blink
-	int nowStatus;
-	int i = 0;
-
-	if (level == 0)
-		nowStatus = 0;
-	else if (onMS && offMS)
-		nowStatus = 1;
-	else
-		nowStatus = 2;
-
-	if (preStatus == nowStatus)
-		return -1;
-
-#ifdef LIGHTS_DBG_ON
-	ALOGD("blink_blue, level=%d, onMS=%d, offMS=%d\n", level, onMS, offMS);
-#endif
-	if (nowStatus == 0) {
-        	write_int(BLUE_LED_FILE, 0);
-	}
-	else if (nowStatus == 1) {
-//        	write_int(BLUE_LED_FILE, level); // default full brightness
-		write_str(BLUE_TRIGGER_FILE, "timer");
-		while (((access(BLUE_DELAY_OFF_FILE, F_OK) == -1) || (access(BLUE_DELAY_OFF_FILE, R_OK|W_OK) == -1)) && i<10) {
-			ALOGD("BLUE_DELAY_OFF_FILE doesn't exist or cannot write!!\n");
-			led_wait_delay(5);//sleep 5ms for wait kernel LED class create led delay_off/delay_on node of fs
-			i++;
-		}
-		write_int(BLUE_DELAY_OFF_FILE, offMS);
-		write_int(BLUE_DELAY_ON_FILE, onMS);
-	}
-	else {
-		write_str(BLUE_TRIGGER_FILE, "none");
-        	write_int(BLUE_LED_FILE, 255); // default full brightness
-	}
-
-	preStatus = nowStatus;
-
-	return 0;
-}
-
-static int
-handle_trackball_light_locked(__attribute__((__unused__)) struct light_device_t* dev)
-{
-    int mode = g_attention;
-
-    if (mode == 7 && g_backlight) {
-        mode = 0;
-    }
-    ALOGV("%s g_backlight = %d, mode = %d, g_attention = %d\n",
-        __func__, g_backlight, mode, g_attention);
-
-    // If the value isn't changing, don't set it, because this
-    // can reset the timer on the breathing mode, which looks bad.
-    if (g_trackball == mode) {
-        return 0;
-    }
-
-    return write_int(TRACKBALL_FILE, mode);
-}
-
 static int
 rgb_to_brightness(struct light_state_t const* state)
 {
@@ -375,7 +213,7 @@ rgb_to_brightness(struct light_state_t const* state)
 }
 
 static int
-set_light_backlight(struct light_device_t* dev,
+set_light_backlight(__attribute__((__unused__)) struct light_device_t* dev,
         struct light_state_t const* state)
 {
     int err = 0;
@@ -383,34 +221,6 @@ set_light_backlight(struct light_device_t* dev,
     pthread_mutex_lock(&g_lock);
     g_backlight = brightness;
     err = write_int(LCD_FILE, brightness);
-    if (g_haveTrackballLight) {
-        handle_trackball_light_locked(dev);
-    }
-    pthread_mutex_unlock(&g_lock);
-    return err;
-}
-
-static int
-set_light_keyboard(__attribute__((__unused__)) struct light_device_t* dev,
-        struct light_state_t const* state)
-{
-    int err = 0;
-    int on = is_lit(state);
-    pthread_mutex_lock(&g_lock);
-    err = write_int(KEYBOARD_FILE, on?255:0);
-    pthread_mutex_unlock(&g_lock);
-    return err;
-}
-
-static int
-set_light_buttons(__attribute__((__unused__)) struct light_device_t* dev,
-        struct light_state_t const* state)
-{
-    int err = 0;
-    int on = is_lit(state);
-    pthread_mutex_lock(&g_lock);
-    g_buttons = on;
-    err = write_int(BUTTON_FILE, on?255:0);
     pthread_mutex_unlock(&g_lock);
     return err;
 }
@@ -419,9 +229,7 @@ static int
 set_speaker_light_locked(__attribute__((__unused__)) struct light_device_t* dev,
         struct light_state_t const* state)
 {
-    int len;
-    int alpha, red, green, blue;
-    int onMS, offMS;
+    int enable, onMS, offMS;
     unsigned int colorRGB;
 
     switch (state->flashMode) {
@@ -443,62 +251,52 @@ set_speaker_light_locked(__attribute__((__unused__)) struct light_device_t* dev,
             colorRGB, onMS, offMS);
 #endif
 
-    alpha = (colorRGB >> 24) & 0xFF;
-    if (alpha) {
-    	red = (colorRGB >> 16) & 0xFF;
-    	green = (colorRGB >> 8) & 0xFF;
-    	blue = colorRGB & 0xFF;
-    } else { // alpha = 0 means turn the LED off
-    	red = green = blue = 0;
-    }
-
-    if (red) {
-        blink_green(0, 0, 0);
-        blink_blue(0, 0, 0);
-        blink_red(red, onMS, offMS);
-    }
-    else if (green) {
-        blink_red(0, 0, 0);
-        blink_blue(0, 0, 0);
-        blink_green(green, onMS, offMS);
-    }
-    else if (blue) {
-        blink_red(0, 0, 0);
-        blink_green(0, 0, 0);
-        blink_blue(blue, onMS, offMS);
-    }
-    else {
-        blink_red(0, 0, 0);
-        blink_green(0, 0, 0);
-        blink_blue(0, 0, 0);
-    }
+//    alpha = (colorRGB >> 24) & 0xFF;
+//    if (alpha) {
+//       red = (colorRGB >> 16) & 0xFF;
+//       green = (colorRGB >> 8) & 0xFF;
+//       blue = colorRGB & 0xFF;
+//    } else { // alpha = 0 means turn the LED off
+//       red = green = blue = 0;
+//    }
+//
+//    if (red) {
+//        blink_green(0, 0, 0);
+//        blink_blue(0, 0, 0);
+//        blink_red(red, onMS, offMS);
+//    }
+//    else if (green) {
+//        blink_red(0, 0, 0);
+//        blink_blue(0, 0, 0);
+//        blink_green(green, onMS, offMS);
+//    }
+//    else if (blue) {
+//        blink_red(0, 0, 0);
+//        blink_green(0, 0, 0);
+//        blink_blue(blue, onMS, offMS);
+//    }
+//    else {
+//        blink_red(0, 0, 0);
+//        blink_green(0, 0, 0);
+//        blink_blue(0, 0, 0);
+//    }
+
+    enable = ((colorRGB >> 24) & 0xFF) && // alpha
+             (((colorRGB >> 16) & 0xFF) || // red
+             ((colorRGB >> 8) & 0xFF) || // green
+             (colorRGB & 0xFF)); // blue
+    if (enable)
+        blink(enable, onMS, offMS);
+    else
+        blink(0, 0, 0);
 
     return 0;
 }
 
 static void
-handle_speaker_battery_locked(struct light_device_t* dev)
+handle_speaker_locked(struct light_device_t* dev)
 {
-    if (is_lit(&g_battery)) {
-        set_speaker_light_locked(dev, &g_battery);
-    } else {
-    	set_speaker_light_locked(dev, &g_battery); /*Turkey workaround: notification and Low battery case, IPO bootup, NLED cannot blink*/
-        set_speaker_light_locked(dev, &g_notification);
-    }
-}
-
-static int
-set_light_battery(struct light_device_t* dev,
-        struct light_state_t const* state)
-{
-    pthread_mutex_lock(&g_lock);
-    g_battery = *state;
-    if (g_haveTrackballLight) {
-        set_speaker_light_locked(dev, state);
-    }
-    handle_speaker_battery_locked(dev);
-    pthread_mutex_unlock(&g_lock);
-    return 0;
+    set_speaker_light_locked(dev, &g_notification);
 }
 
 static int
@@ -507,36 +305,12 @@ set_light_notifications(struct light_device_t* dev,
 {
     pthread_mutex_lock(&g_lock);
     g_notification = *state;
-    ALOGV("set_light_notifications g_trackball=%d color=0x%08x",
-            g_trackball, state->color);
-    if (g_haveTrackballLight) {
-        handle_trackball_light_locked(dev);
-    }
-    handle_speaker_battery_locked(dev);
-    pthread_mutex_unlock(&g_lock);
-    return 0;
-}
-
-static int
-set_light_attention(struct light_device_t* dev,
-        struct light_state_t const* state)
-{
-    pthread_mutex_lock(&g_lock);
-    ALOGV("set_light_attention g_trackball=%d color=0x%08x",
-            g_trackball, state->color);
-    if (state->flashMode == LIGHT_FLASH_HARDWARE) {
-        g_attention = state->flashOnMS;
-    } else if (state->flashMode == LIGHT_FLASH_NONE) {
-        g_attention = 0;
-    }
-    if (g_haveTrackballLight) {
-        handle_trackball_light_locked(dev);
-    }
+    ALOGV("set_light_notifications color=0x%08x", state->color);
+    handle_speaker_locked(dev);
     pthread_mutex_unlock(&g_lock);
     return 0;
 }
 
-
 /** Close the lights device */
 static int
 close_lights(struct light_device_t *dev)
@@ -566,41 +340,9 @@ static int open_lights(const struct hw_module_t* module, char const* name,
         if (access(LCD_FILE, F_OK) < 0)
             return -errno;
     }
-    else if (0 == strcmp(LIGHT_ID_KEYBOARD, name)) {
-        set_light = set_light_keyboard;
-        if (access(KEYBOARD_FILE, F_OK) < 0)
-            return -errno;
-    }
-    else if (0 == strcmp(LIGHT_ID_BUTTONS, name)) {
-        set_light = set_light_buttons;
-        if (access(BUTTON_FILE, F_OK) < 0)
-            return -errno;
-    }
-    else if (0 == strcmp(LIGHT_ID_BATTERY, name)) {
-        set_light = set_light_battery;
-        if (access(RED_LED_FILE, F_OK) < 0)
-            return -errno;
-        if (access(GREEN_LED_FILE, F_OK) < 0)
-            return -errno;
-        if (access(BLUE_LED_FILE, F_OK) < 0)
-            return -errno;
-    }
     else if (0 == strcmp(LIGHT_ID_NOTIFICATIONS, name)) {
         set_light = set_light_notifications;
-        if (access(RED_LED_FILE, F_OK) < 0)
-            return -errno;
-        if (access(GREEN_LED_FILE, F_OK) < 0)
-            return -errno;
-        if (access(BLUE_LED_FILE, F_OK) < 0)
-            return -errno;
-    }
-    else if (0 == strcmp(LIGHT_ID_ATTENTION, name)) {
-        set_light = set_light_attention;
-        if (access(RED_LED_FILE, F_OK) < 0)
-            return -errno;
-        if (access(GREEN_LED_FILE, F_OK) < 0)
-            return -errno;
-        if (access(BLUE_LED_FILE, F_OK) < 0)
+        if (access(LED_FILE, F_OK) < 0)
             return -errno;
     }
     else {
-- 
2.23.0

